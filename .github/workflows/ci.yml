name: CI and Release

on:
  push:
    tags: ['v*.*.*']

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    # Установка зависимостей
    - name: Install dependencies
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake rpm
        elif [ "${{ runner.os }}" == "Windows" ]; then
          choco install cmake wixtoolset -y
        fi
      shell: bash

    - name: Configure and build
      run: |
        cmake -B build -DCPACK_GENERATOR="${{ matrix.package }}"
        cmake --build build --config Release
        cmake --build build --target package
      env:
        package: ${{ matrix.package }}
    
    # Загрузка артефактов с явными путями
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-package
        path: |
          build/*.deb
          build/*.rpm
          build/*.msi
          build/*.dmg
          build/*.tar.gz
          build/*.zip
        if-no-files-found: warn
        retention-days: 1

  create-release:
    needs: build-and-package
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Критически важное разрешение
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*-package'
        merge-multiple: true
    
    # Проверка найденных файлов
    - name: List artifacts
      run: |
        echo "Found files:"
        find artifacts -type f
        echo "Copying to root..."
        cp artifacts/*/* .
      shell: bash
    
    # Создание релиза с проверкой файлов
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          Automated release:
          - Linux: .deb, .rpm
          - Windows: .msi
          - macOS: .dmg
        files: |
          *.deb
          *.rpm
          *.msi
          *.dmg
          *.tar.gz
          *.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
