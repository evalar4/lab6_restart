name: CI and Release

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    # Установка CMake (кроссплатформенно)
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # Установка зависимостей для Linux
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
      shell: bash

    # Установка NSIS для Windows
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: choco install nsis -y
      shell: cmd

    - name: Configure project
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Build project
      run: cmake --build build --config Release

  package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "DEB;RPM"
          - os: windows-latest
            generator: "NSIS"
          - os: macos-latest
            generator: "DragNDrop"
    steps:
    - uses: actions/checkout@v4
    
    # Очистка build-директории (Linux/macOS)
    - name: Clean build (Linux/macOS)
      if: runner.os != 'Windows'
      run: rm -rf build/* && mkdir -p build
      shell: bash

    # Очистка build-директории (Windows)
    - name: Clean build (Windows)
      if: runner.os == 'Windows'
      run: |
        Remove-Item -Path "build\*" -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Path "build" -Force | Out-Null
      shell: pwsh

    # Установка RPM для Linux
    - name: Install RPM tools
      if: runner.os == 'Linux'
      run: sudo apt-get install -y rpm
      shell: bash

    - name: Configure CPack
      run: cmake -B build -DCPACK_GENERATOR="${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release
      
    - name: Build packages
      run: cmake --build build --target package
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-packages
        path: |
          build/*.deb
          build/*.rpm
          build/*.exe
          build/*.dmg
          build/*.tar.gz
          build/*.zip
        if-no-files-found: warn
        retention-days: 1

  release:
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*-packages/*'
        merge-multiple: true
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.deb
          artifacts/*.rpm
          artifacts/*.exe
          artifacts/*.dmg
          artifacts/*.tar.gz
          artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
