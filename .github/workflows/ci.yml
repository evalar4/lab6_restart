name: CI and Release

on:
  push:
    branches: [master]
    tags: ['v*.*.*']
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
      shell: bash

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake nsis -y
      shell: pwsh

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
      shell: bash

    - name: Configure project
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Build project
      run: cmake --build build --config Release

  package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "DEB;RPM"
          - os: windows-latest
            generator: "NSIS"
          - os: macos-latest
            generator: "DragNDrop"
    steps:
    - uses: actions/checkout@v4
    
    - name: Clean build directory
      run: |
        # Кроссплатформенная очистка
        if [ "${{ runner.os }}" = "Windows" ]; then
          Remove-Item -Path "build\*" -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "build" -Force | Out-Null
        else
          rm -rf build/*
          mkdir -p build
        fi
      shell: bash

    - name: Install packaging tools
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get install -y rpm
        fi
      shell: bash

    - name: Configure CPack
      run: cmake -B build -DCPACK_GENERATOR="${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release
      
    - name: Build packages
      run: cmake --build build --target package
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-packages
        path: |
          build/*.deb
          build/*.rpm
          build/*.exe
          build/*.dmg
          build/*.tar.gz
          build/*.zip
        if-no-files-found: warn
        retention-days: 1

  release:
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # КРИТИЧЕСКИ ВАЖНЫЕ ПРАВА
    permissions:
      contents: write
      
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*-packages'
        merge-multiple: true
        
    # Подготовка файлов для релиза
    - name: Prepare release files
      run: |
        echo "Содержимое artifacts:"
        ls -R artifacts
        
        # Создаем директорию для релизных файлов
        mkdir release_files
        
        # Копируем все найденные пакеты
        find artifacts -type f \( -iname "*.deb" -o -iname "*.rpm" -o -iname "*.exe" -o -iname "*.dmg" -o -iname "*.tar.gz" -o -iname "*.zip" \) -exec cp {} release_files/ \;
        
        echo "Файлы для релиза:"
        ls -lh release_files
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          Автоматический релиз ${{ github.ref_name }}
          Содержит пакеты для:
          - Linux (.deb, .rpm)
          - Windows (.exe)
          - macOS (.dmg)
        files: release_files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
